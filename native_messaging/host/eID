#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
from subprocess import Popen, PIPE


serialNumber = 38512290035

# Helper function that sends a message to the webapp.
def send_message(message):
  message = '{"signature": "%s", "serial": "%s"}' % (message.replace('\n',''),serialNumber)
   # Write message size.
  with open("/home/dvas0004/Dropbox/chrome extension/native_messaging/host/log.txt", "wa+") as f:
	f.write(struct.pack('I', len(message)))
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  with open("/home/dvas0004/Dropbox/chrome extension/native_messaging/host/log.txt", "wa+") as f:
	f.write(message)
  sys.stdout.flush()


# Thread that reads messages from the webapp.
def read_thread_func():
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)


    if len(text_length_bytes) == 0:
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')
    # Sign the text
    with open("/tmp/toSign", "w+") as f:
	f.write(text)

    p = Popen(["bash", "/home/dvas0004/Dropbox/chrome extension/native_messaging/host/signer.sh" ], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    send_message(output)


def Main():
	read_thread_func()
	sys.exit(0)


if __name__ == '__main__':
  Main()
